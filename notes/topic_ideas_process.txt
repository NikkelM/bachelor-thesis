Title:
Scope: What is the general context?
Problem: What is the specific problem?
Significance: Why is it a problem? What are the reasons why it is a problem?
Solution: How do you solve it?
Evaluation: Does your solution fulfill expectations (very short)?

Title: 
- Retaining maintainability throughout the scaling of software projects (using automated tools)
- Building Maintainability in (Lean "Build Integrity in")
Scope:
- Maintenance takes up to 70% of development costs -> maintainability is key
- Types of maintenance:
	- Corrective
	- Adaptive
	- Perfective
	- Preventive
Problem: 
- It is said that maintenance on software starts after it has been delivered to the customer.
But in agile projects that work in increments of working software, this shifts maintainability to be within scope
of the actual development process.

Evaluation: What were the expectations: To have software that can be easily maintained
Definition of "maintainability":
	- Any other developer can understand the code without consulting the one who wrote it
		- Includes docstrings, wiki, installation & Quick start guides
	- Developers can be sure that their changes did not break unexpected parts of the software
		- Not only Unit, but Integration and Acceptance tests are needed
		- Clearly defined responsibilities
		- Low coupling & high cohesion
			- Measure this

Did we fulfill expectations?
- How easy or hard is it for new developers to contribute to the software?
- Have we made sure that our tests...
	- test the right things?
	- are "complete"?
	- can be maintained themselves?
- How is our coupling & cohesion? Do the semantics/class definitions make sense?

Outlook: If Usecase/Situation X comes up, how does our maintainability support this?
- A new type of RL-Algorithm should be added
- A new market parameter should be added
- A new type of customer behaviour should be added
- A new type of economy should be added
- The User want a new way of monitoring and comparing an agent
- A produced agent should be tested against an agent that comes from somewhere else

First abstract for Process:
When scaling software projects, knowing when and how to start scaling maintainability is the key to success.
Maintainability manifests in many different ways, be it well documented API's, a comprehensive wiki or sensible tests.
Maintainability can be aided by automating many processes, as this takes strain away from developers and
lowers the barrier of entry for new team members looking to contribute.

In our project, we employed many of these techniques, and this thesis aims to illustrate the goals and ideas behind
the processes involved. Primary focus is the journey from a single-file project to the pip-package `recommerce`
with its automated testing pipeline, code-style checks and comprehensive documentation using automated tools such as 
`Sphinx` and `interrogate`.

Analysis of the process shows that while tests are useful in aiding developers to understand code it must always be
kept in mind that while tests make certain aspects of the software development process more accessible, they are
also to be maintained.

One of the biggest and most costly undertakings was the introduction of pip-packaging the project, which leads
to the conclusion that while building and maintaining a clear vision of the desired state of the product as early as possible
can lead to an overhead early in the process, it will also make the project grow more sustainably, leading to higher
maintainability in the long run.