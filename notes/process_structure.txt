Four types of documentation:
- Tests
- Wiki
- Docstrings (Python specific? -> alternatives in other languages)
    - Interrogate
- In-Code comments
Pros and Cons
Further documentation through CI automation/readthedocs.io/Sphinx

Code style through:
- Linting with Flake8
- Automatic formatting using TOOLSFROMPRECOMMITHERE
- Pre-commit for clean repository
    - Additional action in CI to make sure
- Test & Docstring coverage
    - coverage Pros & Cons
    - Limits
        - interrogate doesn't recognize inherited docstrings
        - own interrogate version for thesis? 

CI:
- Setting up the runner?
- Self-hosted vs. Github hosted
- Tests
- Pre-commit
- dispatch action for environment update
- Different jobs (needs investigating & implementation)
- DevOps:
    - Deployment of… webserver? Docker? Pip-package?
	- documentation
	- versioning (push to main, tags on Github)

Two users as a goal:
- Alex
- SAP Feather
Keeping the „takeover“ in mind throughout the process
Making sure that code is highly maintainable & understandable
Low barrier of entry (conda environment!!! -> needs to go!)

Pip-package:
- Motivation
    - import from webserver
    - easier to work with for users (entrypoint)
        - defined "API" through argparse
- keeping recommerce, docker, webserver separate  
- Python community disagreements (investigate!)
- Iteration
    - Simple version first, without pip (__init__.py)
    - First pip version with just setup.py
    - complete pip incl. Entrypoint, main.py, argparse
- what should be in the package?
- Challenges:
    - relative paths
    - user input
    - additional (data) files
    - working with docker & webserver & tests
    - pytest vs. Pip -> not working (why? Propose ideas? Pros and cons?)
- additional packages & dependencies  

=====================

Introduction:
- Project was from the beginning built for complete takeover by Alex & possible integration into SAP Feather
- Therefore, documentation & maintainability was No° 1 priority (as it should always be)
- Close collaboration with Alex
- Little to no Python experience in the team
- 

Related Work:
- How to deal with packaging is a heavily discussed topic in the Python community

Main Part(s):
1. Documentation & Code Style
2. Tests/CI
3. Packaging

Conclusion/Takeaways:
- Docstrings one of the best additions when the codebase grew larger,
when not everyone can be a Code Owner (Collective Code Ownership impossible)
- 
